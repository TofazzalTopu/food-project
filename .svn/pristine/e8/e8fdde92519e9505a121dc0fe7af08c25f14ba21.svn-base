package com.bits.bdfp.inventory.demandorder.primarydemandorder

import com.bits.bdfp.inventory.demandorder.PrimaryDemandOrderService
import com.bits.bdfp.inventory.demandorder.SecondaryDemandOrderService
import com.bits.bdfp.inventory.sales.DistributionPoint
import com.bits.bdfp.settings.ApplicationUserDistributionPoint
import com.docu.common.Action
import com.docu.common.GridEntity
import com.docu.security.ApplicationUser
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

/**
 * Created by prianka.adhikary on 9/14/2015.
 */
@Component("listOrderStatusAction")
class ListOrderStatusAction extends Action {

    private static final Log log = LogFactory.getLog(this)
    @Autowired
    PrimaryDemandOrderService primaryDemandOrderService

    public Object preCondition(Object params, Object object) {
        //not need to implement
        return null
    }

    public Object execute(Object params, Object object) {
        try {
            ApplicationUser applicationUser = (ApplicationUser) object
            init(params)
            Map result = [:]
            List objectList = null

            ApplicationUserDistributionPoint applicationUserDistributionPoint = ApplicationUserDistributionPoint.findByApplicationUser(applicationUser)
            if (applicationUserDistributionPoint) {
                if (applicationUserDistributionPoint.distributionPoint.isFactory == false) {
                    result = primaryDemandOrderService.getListOrderStatusGridIsFactoryFalse(this, params, applicationUser)
                    if (result) { // in case: normal list
                        objectList = result.objList
                        total = result.count
                    }
                }
                else{
                    result = primaryDemandOrderService.getListOrderStatusGrid(this, params)
                    if (result) { // in case: normal list
                        objectList = result.objList
                        total = result.count
                    }
                }
            }

            List objList = this.wrapListInGridEntityList(objectList, start)
            result = this.postCondition(objList, null)
            return result
        }
        catch (Exception ex) {
            log.error(ex.message)
            return null
        }
    }


    private List wrapListInGridEntityList(objList, start) {
        List instants = []
        int counter = start + 1;
        objList.each { instance ->
            GridEntity obj = new GridEntity()
            obj.id = instance.id
            obj.cell = ["${counter}",
                        "${instance.id ? instance.id : ''}",

                        "${instance.order_no ? instance.order_no : ''}",
                        "${instance.order_date ? instance.order_date : ''}",
                        "${instance.proposed_date ? instance.proposed_date : ''}",
                        "${instance.expected_date ? instance.expected_date : ''}",
                        "${instance.demand_order_status ? instance.demand_order_status : ''}",
                        "${instance.customer ? instance.customer : ''}",
                        "${instance.approved_by ? instance.approved_by : ''}"
            ]
            instants << obj
            counter++
        };
        return instants
    }

    public Object postCondition(Object objList, Object object) {
        int pageCount = 1
        if (resultPerPage < 0) {
            pageCount = 1
            resultPerPage = total
        } else {
            if (total > resultPerPage) {
                pageCount = Math.ceil(total / resultPerPage)
            }
        }
        Map output = [page: pageNum, total: pageCount, records: total, rows: objList]
        return output;
    }


}






