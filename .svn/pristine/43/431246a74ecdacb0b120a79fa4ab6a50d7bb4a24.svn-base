package com.bits.bdfp.promotion

import com.docu.common.Action
import com.docu.security.ApplicationUser
import grails.plugins.springsecurity.SpringSecurityService
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

import java.text.DateFormat
import java.text.SimpleDateFormat

/**
 * Created by mdtofazzal.hossain on 5/15/2018.
 */
@Component("createPromotionAction")
class CreatePromotionAction extends Action {

    public static final Log log = LogFactory.getLog(CreatePromotionAction.class)
    private final String MESSAGE_HEADER = 'New Promotion Package'
    private final String MESSAGE_SUCCESS = 'Promotion Package Successfully'

    @Autowired
    CreatePromotionService createPromotionService

    @Autowired
    SpringSecurityService springSecurityService

    @Override
    public Promotion preCondition(def object, def params) {
        try {
            def user = (ApplicationUser) springSecurityService?.getCurrentUser()
            ApplicationUser applicationUser = (ApplicationUser) user
            Promotion promotion = new Promotion()

            DateFormat format = new SimpleDateFormat("dd-MM-yyyy")
            String asOf = params.asOfDate
            String effectiveFrom = params.effectiveFrom
            String effectiveTo = params.effectiveTo
//            Date asOfDate = new SimpleDateFormat("dd/MM/yyyy").parse(asOf)
            Date effectiveFromDate = new SimpleDateFormat("dd-MM-yyyy").parse(effectiveFrom)
            Date effectiveToDate = new SimpleDateFormat("dd-MM-yyyy").parse(effectiveTo)

            promotion.name = params.promotionName
            promotion.effectiveFrom = effectiveFromDate
            promotion.effectiveTo = effectiveToDate
            promotion.isActive = true

            promotion.userCreated = applicationUser
            promotion.dateCreated = new Date()

            if (!promotion.validate()) {
                this.getValidationErrorMessage(promotion)
            }
            return promotion
        } catch (Exception ex) {
            log.error(ex.message)
            return null
        }
    }

    public Object execute(Object object, Object params) {
        try {
            return createPromotionService.create(object)
        } catch (Exception ex) {
            log.error(ex.message)
            return null
        }
    }

    @Override
    public Object postCondition(def object, def params) {
        return params
    }


}
